#!/usr/bin/python

import os
import Image
import imghdr
import argparse
import itertools

DATE_TIME_ORIGINAL_TAG = 0x9003

def get_date_time_original(file_name):
    i = Image.open(file_name)
    info = i._getexif()
    return info[DATE_TIME_ORIGINAL_TAG]

def list_files(path, recursive):
    files = []
    for dirpath, dirs, filenames in os.walk(path):
        for f in filenames:
            full = os.path.join(dirpath, f)
            files.append(full)
        if not recursive: 
            break
    return files

def is_image(f):
    return os.path.isfile(f) and imghdr.what(f) in ['jpeg', 'gif', 'png']

def new_name(file_path):
    _, ext = os.path.splitext(file_path)
    ext = ext.lower()
    directory, _ = os.path.split(file_path)
    t = get_date_time_original(file_path)
    new_name = t.replace(' ', '_').replace(':', '.')
    return os.path.join(directory, "%s.0%s" % (new_name,ext))

def rename_all(old_names, new_names):
    for old, new in zip(old_names, new_names):
        if os.path.exists(new):
            print "WARN: file already exists! Skipped:"
            print '|-', old
            print '|+', new
        else:
            # TODO: use os.path.commonprefix(list) to prettify printing
            print '--', old
            print '++', new
            print
#            os.rename(old, new)

def remove_duplicates(old, new):
    is_dissimilar = lambda (x, y): x!=y
    zipped = zip(old, new)
    zipped = filter(is_dissimilar, zipped)
    return zip(*zipped)

def bump(name):
    dirname, basename = os.path.split(name)
    root, ext = os.path.splitext(basename)
    r = root.split('.')
    r[-1] = str(int(r[-1]) + 1)
    root = '.'.join(r)
    basename = root+ext
    return os.path.join(dirname,basename)

def ensure_uniqueness(new):
    is_used = lambda name: os.path.exists(name) or name in unique
    unique = []
    for name in new:
        while is_used(name):
            name = bump(name)
        unique.append(name)
    return unique

if __name__=='__main__':
    parser = argparse.ArgumentParser(description='Rename image files based on the EXIF OriginalTime field.')
    parser.add_argument('-r', '--recursive', help='rename subdirectories recursively', action='store_true')
    parser.add_argument('-d', '--directory', help='directory of files to rename (defaults to .)', default='.')
    args = parser.parse_args()

    files = list_files(args.directory, args.recursive)
    images = filter(is_image, files)
    old_names = map(os.path.abspath, images)
    new_names = map(new_name, old_names)
    old_names, new_names = remove_duplicates(old_names, new_names)
    new_names = ensure_uniqueness(new_names)
    rename_all(old_names, new_names)


#!/usr/bin/python

import os
import re
import Image
import imghdr
import argparse

DATE_TIME_ORIGINAL_TAG = 0x9003

def get_date_time_original(file_name):
    i = Image.open(file_name)
    info = i._getexif()
    return info[DATE_TIME_ORIGINAL_TAG]

def list_files(path, recursive):
    files = []
    for dirpath, dirs, filenames in os.walk(path):
        for f in filenames:
            full = os.path.join(dirpath, f)
            files.append(full)
        if not recursive: 
            break
    return files

def is_image(f):
    return os.path.isfile(f) and imghdr.what(f) in ['jpeg', 'gif', 'png']

def new_name(file_path):
    _, ext = os.path.splitext(file_path)
    ext = ext.lower()
    directory, _ = os.path.split(file_path)
    t = get_date_time_original(file_path)
    new_name = t.replace(' ', '_').replace(':', '.')
    return os.path.join(directory, "%s.0%s" % (new_name,ext))

def rename(pair):
    old, new = pair
    if os.path.exists(new):
        print "WARN: file already exists! Skipped:"
        print '|-', old
        print '|+', new
    else:
        # TODO: use os.path.commonprefix(list) to prettify printing
        print '--', old
        print '++', new
        print
#        os.rename(old, new)

def remove_duplicates(pairs):
    return filter(lambda (x, y): x!=y, pairs)

def bump_name(name):
    root, ext = os.path.splitext(name)
    prefix, version = re.match(r"(.*[^\d]+)([\d]+)$", root).groups()
    root = prefix + str(int(version)+1).rjust(len(version), '0')
    return root+ext

def ensure_uniqueness(names):
    is_used = lambda name: os.path.exists(name) or name in unique_names
    old, new = zip(*names)
    unique_names = []
    for name in new:
        while is_used(name):
            name = bump_name(name)
        unique_names.append(name)
    return zip(old, unique_names)

if __name__=='__main__':
    parser = argparse.ArgumentParser(description='Rename image files based on the EXIF OriginalTime field.')
    parser.add_argument('-r', '--recursive', help='rename subdirectories recursively', action='store_true')
    parser.add_argument('-d', '--directory', help='directory of files to rename (defaults to .)', default='.')
    args = parser.parse_args()

    files = list_files(args.directory, args.recursive)
    images = filter(is_image, files)
    old_names = map(os.path.abspath, images)
    new_names = map(new_name, old_names)
    pairs = zip(old_names, new_names)
    pairs = remove_duplicates(pairs)
    pairs = ensure_uniqueness(pairs)
    map(rename, pairs)
    
